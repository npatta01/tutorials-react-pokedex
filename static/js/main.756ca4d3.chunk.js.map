{"version":3,"sources":["components/PokemonCard.module.css","containers/PokemonListDetailPage.module.css","containers/AboutPage.tsx","services/PokemonMockService.ts","components/PokemonCard.tsx","containers/PokemonListDetailPage.tsx","containers/PokemonDetailPage.tsx","components/NavHeader.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","AboutPage","Container","src","alt","href","Table","striped","bordered","hover","title","width","height","frameBorder","allow","allowFullScreen","React","PokemonMockService","id","paddedId","toString","padStart","data","name","sprites","back_default","back_female","back_shiny","back_shiny_female","front_default","front_female","front_shiny","front_shiny_female","types","slot","type","url","defaultType","weight","defaultImage","this","getImageUrl","pokemons","forEach","p","index","PokemonCard","pokemon","props","className","styles","card","image","PokemonListDetailPage","getPokemons","setState","state","container","map","key","PokemonDetailPage","getPokemonDetails","pokemonData","NavHeader","Navbar","bg","variant","Brand","Nav","Link","Home","Boolean","window","location","hostname","match","ReactDOM","render","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oGACAA,EAAOC,QAAU,CAAC,KAAO,0BAA0B,KAAO,0BAA0B,MAAQ,2BAA2B,MAAQ,6B,mBCA/HD,EAAOC,QAAU,CAAC,UAAY,2C,sKCETC,E,iLAEjB,OACE,2BACE,gBAACC,EAAA,EAAD,KACE,qCAEA,4NAMA,4RAOA,8BACE,uBACEC,IAAI,qFACJC,IAAI,YAEN,gEACA,4BACE,qBAAGC,KAAK,gDAAR,eAMJ,2BACE,4CAEA,gBAACC,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,GAC3B,6BACE,0BACE,wCACA,2CAGJ,6BACE,0BACE,mCACA,kCAEF,0BACE,mCACA,qCAMR,2BACE,0BACEC,MAAM,aACNC,MAAM,MACNC,OAAO,MACPT,IAAI,4CACJU,YAAY,IACZC,MAAM,0EACNC,iBAAe,W,GAhEUC,a,yBCI1BC,EAAb,yGACqBC,GAEjB,IAAMC,EAAWD,EAAGE,WAAWC,SAAS,EAAG,KAE3C,MAAM,GAAN,OARF,0DAQE,YAA4BF,EAA5B,UALJ,4MAOsC,GAC9BG,EAAiB,CACnBV,OAAQ,EACRM,GAAI,GACJK,KAAM,UACNC,QAAS,CACPC,aACE,uFACFC,YACE,8FACFC,WACE,6FACFC,kBACE,oGACFC,cACE,kFACFC,aACE,yFACFC,YACE,wFACFC,mBACE,gGAEJC,MAAO,CACL,CACEC,KAAM,EACNC,KAAM,CACJZ,KAAM,WACNa,IAAK,wCAIXC,YAAa,WACbC,OAAQ,KAILC,aAAeC,KAAKC,YAAYnB,EAAKJ,IA5C9C,kBA6CWI,GA7CX,mTAgDmC,KAUzBoB,EAAkC,CACtC,CACEnB,KAAM,YACNa,IAAK,wCAEP,CACEb,KAAM,UACNa,IAAK,wCAEP,CACEb,KAAM,WACNa,IAAK,wCAEP,CACEb,KAAM,aACNa,IAAK,wCAEP,CACEb,KAAM,aACNa,IAAK,wCAEP,CACEb,KAAM,YACNa,IAAK,wCAEP,CACEb,KAAM,WACNa,IAAK,wCAEP,CACEb,KAAM,YACNa,IAAK,wCAEP,CACEb,KAAM,YACNa,IAAK,wCAEP,CACEb,KAAM,WACNa,IAAK,yCAEP,CACEb,KAAM,UACNa,IAAK,yCAEP,CACEb,KAAM,aACNa,IAAK,yCAEP,CACEb,KAAM,SACNa,IAAK,yCAEP,CACEb,KAAM,SACNa,IAAK,yCAEP,CACEb,KAAM,WACNa,IAAK,yCAEP,CACEb,KAAM,SACNa,IAAK,yCAEP,CACEb,KAAM,YACNa,IAAK,yCAEP,CACEb,KAAM,UACNa,IAAK,yCAEP,CACEb,KAAM,UACNa,IAAK,yCAEP,CACEb,KAAM,WACNa,IAAK,2CAIAO,SAAQ,SAACC,EAAGC,GACnB,IAAM3B,EAAK2B,EAAQ,EACnBD,EAAEL,aAAe,EAAKE,YAAYvB,GAClC0B,EAAE1B,GAAKA,KAhJb,kBAmJWwB,GAnJX,wG,iBCKqBI,E,iLACT,IACAC,EAAYP,KAAKQ,MAAjBD,QACR,OAAIA,EAEA,uBAAKE,UAAWC,IAAOC,MACrB,sBAAIF,UAAWC,IAAOxC,OAAQqC,EAAQxB,MACtC,uBAAK0B,UAAWC,IAAOE,OACrB,uBAAKjD,IAAK4C,EAAQR,aAAcnC,IAAK2C,EAAQxB,SAO5C,S,GAf4BP,a,iBCDpBqC,E,4TAKMpC,EAAmBqC,c,OAApCZ,E,OAENF,KAAKe,SAAS,CAAEb,SAAUA,I,qIAGlB,IAAD,EAEDA,EAAQ,UAAGF,KAAKgB,aAAR,aAAG,EAAYd,SAE7B,OAAIA,EAEA,2BACE,uBAAKO,UAAWC,IAAOO,WACpBf,EAASgB,KAAI,SAACd,EAAGC,GAChB,OAAO,gBAAC,EAAD,CAAac,IAAKd,EAAOE,QAASH,SAM1C,S,GAzBsC5B,aCA9B4C,E,4TAES3C,EAAmB4C,oB,OAAvCC,E,OAENtB,KAAKe,SAAS,CAAER,QAASe,I,qIAGjB,IAAD,EACDf,EAAO,UAAGP,KAAKgB,aAAR,aAAG,EAAYT,QAC5B,OAAIA,EAEA,2BACE,wDAEA,2BACE,gBAAC,EAAD,CAAaA,QAASA,MAKrB,S,GApBkC/B,a,gBCP1B+C,E,iLAEjB,OACE,gBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,QACxB,gBAACF,EAAA,EAAOG,MAAR,CAAc9D,KAAK,SAAnB,WACA,gBAAC+D,EAAA,EAAD,CAAKnB,UAAU,WACb,gBAACmB,EAAA,EAAIC,KAAL,CAAUhE,KAAK,KAAf,QACA,gBAAC+D,EAAA,EAAIC,KAAL,CAAUhE,KAAK,UAAf,SACA,gBAAC+D,EAAA,EAAIC,KAAL,CAAUhE,KAAK,QAAf,OACA,gBAAC+D,EAAA,EAAIC,KAAL,CAAUhE,KAAK,WAAf,gB,GAT6BW,a,sBCevC,SAASsD,IACP,OAAO,oCCRWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,mBFkBD,WACb,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,EAAD,MAEA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWV,IACjC,kBAAC,IAAD,CAAOQ,OAAK,EAACC,KAAK,SAASC,UAAW/E,IACtC,kBAAC,IAAD,CAAO6E,OAAK,EAACC,KAAK,OAAOC,UAAW3B,IACpC,kBAAC,IAAD,CAAOyB,OAAK,EAACC,KAAK,UAAUC,UAAWpB,SE5BjC,MAASqB,SAASC,eAAe,SDsI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.756ca4d3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"PokemonCard_card__inzGq\",\"data\":\"PokemonCard_data__2N1Xn\",\"title\":\"PokemonCard_title__1ZIGJ\",\"image\":\"PokemonCard_image__1Uycc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"PokemonListDetailPage_container__2hwuK\"};","import * as React from \"react\";\nimport { Container, Table } from \"react-bootstrap\";\n\nexport default class AboutPage extends React.Component {\n  render() {\n    return (\n      <div>\n        <Container>\n          <h1>Pokedex</h1>\n\n          <p>\n            The Pokédex is an electronic device designed to catalogue and\n            provide information regarding the various species of Pokémon\n            featured in the Pokémon video game, anime and manga series.\n          </p>\n\n          <p>\n            The name Pokédex is a neologism including \"Pokémon\" (which itself is\n            a portmanteau of \"pocket\" and \"monster\") and \"index\". The Japanese\n            name is simply \"Pokémon Encyclopedia\", and it can feature every\n            Pokémon on it, depending on the Pokédex.\n          </p>\n\n          <figure>\n            <img\n              src=\"https://giantbomb1.cbsistatic.com/uploads/original/2/27545/1066177-ashpokedex2.png\"\n              alt=\"pokedex\"\n            />\n            <figcaption>Pokedex from ep1 of anime.</figcaption>\n            <cite>\n              <a href=\"https://www.giantbomb.com/pokedex/3055-1310/\">\n                Giantbomb\n              </a>\n            </cite>\n          </figure>\n\n          <div>\n            <h2> Num Pokemons </h2>\n\n            <Table striped bordered hover>\n              <thead>\n                <tr>\n                  <th>Generation</th>\n                  <th>New Pokemon</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <td>Gen 1</td>\n                  <td>151</td>\n                </tr>\n                <tr>\n                  <td>Gen 2</td>\n                  <td>100</td>\n                </tr>\n              </tbody>\n            </Table>\n          </div>\n\n          <div>\n            <iframe\n              title=\"theme song\"\n              width=\"560\"\n              height=\"315\"\n              src=\"https://www.youtube.com/embed/QCILyXK1U58\"\n              frameBorder=\"0\"\n              allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n              allowFullScreen\n            />\n          </div>\n        </Container>\n      </div>\n    );\n  }\n}\n","import { IPokemon, IPokemonListElement } from \"../models/pokemon\";\nimport axios from \"axios\";\n\nconst BASE_IMAGE_URL =\n  \"https://assets.pokemon.com/assets/cms2/img/pokedex/full\";\nconst API_BASE = \"https://pokeapi.co/api/v2\";\n\nexport class PokemonMockService {\n  static getImageUrl(id: number) {\n    //.padStart(8, \"0\");\n    const paddedId = id.toString().padStart(3, \"0\");\n\n    return `${BASE_IMAGE_URL}/${paddedId}.png`;\n  }\n  static async getPokemonDetails(id = 5): Promise<IPokemon> {\n    let data: IPokemon = {\n      height: 4,\n      id: 25,\n      name: \"pikachu\",\n      sprites: {\n        back_default:\n          \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/back/25.png\",\n        back_female:\n          \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/back/female/25.png\",\n        back_shiny:\n          \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/back/shiny/25.png\",\n        back_shiny_female:\n          \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/back/shiny/female/25.png\",\n        front_default:\n          \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/25.png\",\n        front_female:\n          \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/female/25.png\",\n        front_shiny:\n          \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/shiny/25.png\",\n        front_shiny_female:\n          \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/shiny/female/25.png\"\n      },\n      types: [\n        {\n          slot: 1,\n          type: {\n            name: \"electric\",\n            url: \"https://pokeapi.co/api/v2/type/13/\"\n          }\n        }\n      ],\n      defaultType: \"electric\",\n      weight: 60\n    };\n\n    //data.defaultImage = data.sprites.front_default;\n    data.defaultImage = this.getImageUrl(data.id);\n    return data;\n  }\n\n  static async getPokemons(limit = 151): Promise<IPokemonListElement[]> {\n    // const url = `${API_BASE}/pokemon`;\n    // const queryParams = { limit: limit };\n\n    // const response = await axios.get(url, { params: queryParams });\n\n    // const data = response.data;\n\n    // const pokemons: IPokemonListElement[] = data.results;\n\n    const pokemons: IPokemonListElement[] = [\n      {\n        name: \"bulbasaur\",\n        url: \"https://pokeapi.co/api/v2/pokemon/1/\"\n      },\n      {\n        name: \"ivysaur\",\n        url: \"https://pokeapi.co/api/v2/pokemon/2/\"\n      },\n      {\n        name: \"venusaur\",\n        url: \"https://pokeapi.co/api/v2/pokemon/3/\"\n      },\n      {\n        name: \"charmander\",\n        url: \"https://pokeapi.co/api/v2/pokemon/4/\"\n      },\n      {\n        name: \"charmeleon\",\n        url: \"https://pokeapi.co/api/v2/pokemon/5/\"\n      },\n      {\n        name: \"charizard\",\n        url: \"https://pokeapi.co/api/v2/pokemon/6/\"\n      },\n      {\n        name: \"squirtle\",\n        url: \"https://pokeapi.co/api/v2/pokemon/7/\"\n      },\n      {\n        name: \"wartortle\",\n        url: \"https://pokeapi.co/api/v2/pokemon/8/\"\n      },\n      {\n        name: \"blastoise\",\n        url: \"https://pokeapi.co/api/v2/pokemon/9/\"\n      },\n      {\n        name: \"caterpie\",\n        url: \"https://pokeapi.co/api/v2/pokemon/10/\"\n      },\n      {\n        name: \"metapod\",\n        url: \"https://pokeapi.co/api/v2/pokemon/11/\"\n      },\n      {\n        name: \"butterfree\",\n        url: \"https://pokeapi.co/api/v2/pokemon/12/\"\n      },\n      {\n        name: \"weedle\",\n        url: \"https://pokeapi.co/api/v2/pokemon/13/\"\n      },\n      {\n        name: \"kakuna\",\n        url: \"https://pokeapi.co/api/v2/pokemon/14/\"\n      },\n      {\n        name: \"beedrill\",\n        url: \"https://pokeapi.co/api/v2/pokemon/15/\"\n      },\n      {\n        name: \"pidgey\",\n        url: \"https://pokeapi.co/api/v2/pokemon/16/\"\n      },\n      {\n        name: \"pidgeotto\",\n        url: \"https://pokeapi.co/api/v2/pokemon/17/\"\n      },\n      {\n        name: \"pidgeot\",\n        url: \"https://pokeapi.co/api/v2/pokemon/18/\"\n      },\n      {\n        name: \"rattata\",\n        url: \"https://pokeapi.co/api/v2/pokemon/19/\"\n      },\n      {\n        name: \"raticate\",\n        url: \"https://pokeapi.co/api/v2/pokemon/20/\"\n      }\n    ];\n\n    pokemons.forEach((p, index) => {\n      const id = index + 1;\n      p.defaultImage = this.getImageUrl(id);\n      p.id = id;\n    });\n\n    return pokemons;\n  }\n}\n","import * as React from \"react\";\nimport styles from \"./PokemonCard.module.css\";\nimport { IPokemon, IPokemonListElement } from \"../models/pokemon\";\n\n\n\ninterface Props {\n  pokemon: IPokemon | IPokemonListElement;\n}\ninterface State {}\n\n\nexport default class PokemonCard extends React.Component<Props, State> {\n  render() {\n    const { pokemon } = this.props;\n    if (pokemon) {\n      return (\n        <div className={styles.card}>\n          <h1 className={styles.title}>{pokemon.name}</h1>\n          <div className={styles.image}>\n            <img src={pokemon.defaultImage} alt={pokemon.name} />\n          </div>\n\n         \n        </div>\n      );\n    } else {\n      return null;\n    }\n  }\n}\n","import * as React from \"react\";\nimport { PokemonMockService } from \"../services/PokemonMockService\";\nimport { IPokemonListElement } from \"../models/pokemon\";\nimport PokemonCard from \"../components/PokemonCard\";\nimport styles from \"./PokemonListDetailPage.module.css\";\n\n\ninterface IProps {}\ninterface IState {\n  pokemons: IPokemonListElement[];\n}\nexport default class PokemonListDetailPage extends React.Component<\n  IProps,\n  IState\n> {\n  async componentDidMount() {\n    const pokemons = await PokemonMockService.getPokemons();\n\n    this.setState({ pokemons: pokemons });\n  }\n\n  render() {\n    \n    const pokemons = this.state?.pokemons;\n\n    if (pokemons) {\n      return (\n        <div>\n          <div className={styles.container}>\n            {pokemons.map((p, index) => {\n              return <PokemonCard key={index} pokemon={p} />;\n            })}\n          </div>\n        </div>\n      );\n    } else {\n      return null;\n    }\n  }\n}\n","import * as React from \"react\";\nimport { PokemonMockService } from \"../services/PokemonMockService\";\nimport { IPokemon } from \"../models/pokemon\";\nimport PokemonCard from \"../components/PokemonCard\";\n\ntype IProps = {};\n\ntype IState = {\n  pokemon: IPokemon;\n};\n\nexport default class PokemonDetailPage extends React.Component<IProps, IState> {\n  async componentDidMount() {\n    const pokemonData = await PokemonMockService.getPokemonDetails();\n\n    this.setState({ pokemon: pokemonData });\n  }\n\n  render() {\n    const pokemon = this.state?.pokemon;\n    if (pokemon) {\n      return (\n        <div>\n          <h2>single Pokemon detail page</h2>\n\n          <div>\n            <PokemonCard pokemon={pokemon} />\n          </div>\n        </div>\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\n//           <div> {pokemon.types[0].type.name} </div>\n","import * as React from \"react\";\n\nimport { Nav, Navbar } from \"react-bootstrap\";\n\nexport default class NavHeader extends React.Component {\n  render() {\n    return (\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand href=\"#home\">PokeApi</Navbar.Brand>\n        <Nav className=\"mr-auto\">\n          <Nav.Link href=\"/\">Home</Nav.Link>\n          <Nav.Link href=\"/about\">About</Nav.Link>\n          <Nav.Link href=\"/all\">All</Nav.Link>\n          <Nav.Link href=\"/detail\">Detail</Nav.Link>\n        </Nav>\n      </Navbar>\n    );\n  }\n}\n","import React from 'react';\n\nimport AboutPage from \"./containers/AboutPage\";\n\nimport PokemonListDetailPage from \"./containers/PokemonListDetailPage\";\nimport PokemonDetailPage from \"./containers/PokemonDetailPage\";\nimport NavHeader from \"./components/NavHeader\";\n\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  //  useRouteMatch,\n  //  useParams\n} from \"react-router-dom\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nfunction Home() {\n  return <h2>Home</h2>;\n}\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        <NavHeader />\n\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/about\" component={AboutPage} />\n          <Route exact path=\"/all\" component={PokemonListDetailPage} />\n          <Route exact path=\"/detail\" component={PokemonDetailPage} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}